(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{441:function(t,a,e){t.exports=e.p+"assets/img/image-20210103133743788.ff2ade45.png"},509:function(t,a,e){"use strict";e.r(a);var i=e(5),_=Object(i.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"类加载的时机"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#类加载的时机"}},[t._v("#")]),t._v(" 类加载的时机")]),t._v(" "),i("h3",{attrs:{id:"生命周期"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),i("blockquote",[i("p",[t._v("加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）"),i("img",{attrs:{src:e(441),alt:"image-20210103133743788"}})])]),t._v(" "),i("h3",{attrs:{id:"必须进行初始化的六个条件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#必须进行初始化的六个条件"}},[t._v("#")]),t._v(" 必须进行初始化的六个条件")]),t._v(" "),i("blockquote",[i("p",[t._v("1）遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码场景有：\n·使用new关键字实例化对象的时候。\n·读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候。\n·调用一个类型的静态方法的时候。")]),t._v(" "),i("p",[t._v("2）使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化")]),t._v(" "),i("p",[t._v("3）当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。")]),t._v(" "),i("p",[t._v("4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。")]),t._v(" "),i("p",[t._v("5）当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化")]),t._v(" "),i("p",[t._v("6）当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。")])]),t._v(" "),i("h2",{attrs:{id:"加载"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[t._v("#")]),t._v(" 加载")]),t._v(" "),i("blockquote",[i("ol",[i("li",[t._v("通过一个类的全限定名来获取定义此类的二进制字节流。")]),t._v(" "),i("li",[t._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。")]),t._v(" "),i("li",[t._v("在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口")])])]),t._v(" "),i("h2",{attrs:{id:"验证"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[t._v("#")]),t._v(" 验证")]),t._v(" "),i("blockquote",[i("p",[t._v("验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。")])]),t._v(" "),i("blockquote",[i("ol",[i("li",[t._v("文件格式验证")]),t._v(" "),i("li",[t._v("元数据验证")]),t._v(" "),i("li",[t._v("字节码验证")]),t._v(" "),i("li",[t._v("符号引用验证")])]),t._v(" "),i("p",[t._v("优化: -Xverify：none")])]),t._v(" "),i("h2",{attrs:{id:"准备"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[t._v("#")]),t._v(" 准备")]),t._v(" "),i("blockquote",[i("p",[t._v("准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段")])]),t._v(" "),i("h2",{attrs:{id:"解析"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[t._v("#")]),t._v(" 解析")]),t._v(" "),i("h3",{attrs:{id:"解析时机"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解析时机"}},[t._v("#")]),t._v(" 解析时机")]),t._v(" "),i("blockquote",[i("p",[t._v("执行ane-warray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invoke-special、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield和putstatic这17个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。")])]),t._v(" "),i("h3",{attrs:{id:"解析对象"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解析对象"}},[t._v("#")]),t._v(" 解析对象")]),t._v(" "),i("blockquote",[i("p",[t._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符这7类符号引用进行，分别对应于常量池的CONSTANT_Class_info、CON-STANT_Fieldref_info、CONSTANT_Methodref_info、CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、CONSTANT_MethodHandle_info、CONSTANT_Dyna-mic_info和CONSTANT_InvokeDynamic_info 8种常量类型")])]),t._v(" "),i("h2",{attrs:{id:"初始化"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")])])}),[],!1,null,null,null);a.default=_.exports}}]);